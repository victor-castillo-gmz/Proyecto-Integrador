name: Build and Test Workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      # 1. Clonar el repositorio
      - uses: actions/checkout@v4

      # 2. Instalar dependencias necesarias
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential lcov gcovr git

      # 3. Instalar Google Test
      - name: Install Google Test
        run: |
          echo "Installing Google Test..."
          git clone --depth 1 https://github.com/google/googletest.git /tmp/googletest
          mkdir -p /tmp/googletest/build
          cd /tmp/googletest/build
          cmake .. -DBUILD_GMOCK=OFF -DBUILD_GTEST=ON -DCMAKE_INSTALL_PREFIX=/usr/local
          sudo make install
          echo "Google Test installed."

      # 4. DEBUGGING STEP (KEEP THIS FOR NOW, JUST IN CASE)
      - name: List Project Files for Debugging
        run: |
          echo "Listing files in the repository root directory:"
          ls -F
          echo ""
          echo "Listing files recursively from the repository root:"
          ls -RF
          echo ""
          echo "Current working directory: $(pwd)"

      # NEW CRITICAL STEP: Copy source files to the build directory
      # This ensures all source files are directly accessible within the build context.
      - name: Copy Source Files to Build Directory
        run: |
          mkdir -p build
          echo "Copying core .cpp and .h files to build directory..."
          # Copy all .cpp and .h files from the repository root to the 'build' directory
          cp *.cpp *.h build/ || true # '|| true' to prevent failure if no matching files
          echo "Copying tests directory contents to build/tests..."
          # Create build/tests and copy tests.cpp into it
          mkdir -p build/tests
          cp tests/*.cpp build/tests/ || true # '|| true' to prevent failure if no matching files

      # 5. Crear directorio de compilación y configurar el proyecto
      - name: Configure Build System
        run: |
          cd build
          # Now, CMake will be run from inside the 'build' directory,
          # and all source files are already copied there or into 'build/tests'.
          cmake . # IMPORTANT: No '..' needed here anymore!

      # 6. Compilar el código fuente
      - name: Build Project
        run: |
          cd build
          cmake --build .

      # 7. Ejecutar pruebas con salida detallada en caso de error
      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure

      # 8. Generar informe de cobertura
      - name: Generate Coverage Report
        run: |
          cd build
          # Adjust --root for gcovr as sources are now inside 'build'
          lcov --capture --directory . --output-file coverage.info --ignore-errors mismatch
          # gcovr --root . --exclude 'tests/*' --sonarqube -o coverage.xml --print-summary
          # IMPORTANT: gcovr --root should now be '.' as sources are in the current dir ('build')
          # or if it expects the original project root, you might need to adjust.
          # Let's try relative to the build dir first.
          # Corrected gcovr command:
          gcovr --root . --exclude 'tests/*' --exclude 'main.cpp' --sonarqube -o coverage.xml --print-summary

      # 9. Subir informe de cobertura
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage.xml

  build_analysis:
    name: Build and Analyze
    runs-on: ubuntu-latest
    needs: tests # Este job se ejecuta después de 'tests'

    steps:
      # 1. Clonar el repositorio (con historial necesario para SonarQube)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Descargar el informe de cobertura generado en el job anterior
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: build/

      # 3. Instalar Google Test para SonarQube
      # SonarQube a menudo re-compila el proyecto para el análisis, por lo que GTest debe estar disponible.
      - name: Install Google Test for SonarQube
        run: |
          echo "Installing Google Test for SonarQube analysis..."
          git clone --depth 1 https://github.com/google/googletest.git /tmp/googletest-sonar
          mkdir -p /tmp/googletest-sonar/build
          cd /tmp/googletest-sonar/build
          cmake .. -DBUILD_GMOCK=OFF -DBUILD_GTEST=ON -DCMAKE_INSTALL_PREFIX=/usr/local
          sudo make install
          echo "Google Test installed for SonarQube."

      # 4. Ejecutar análisis de código con SonarQube
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
          # Para C/C++, SonarQube a menudo requiere un 'build-wrapper' o configuración específica
          # en tu `sonar-project.properties`. Si estás usando un `build-wrapper`,
          # asegúrate de que esté configurado para generar la información necesaria.
          # Ejemplos de argumentos que podrías necesitar:
          # args: >
          #   -Dsonar.cfamily.build-wrapper-output=build_wrapper_output_directory
          #   -Dsonar.cfamily.gtest.enabled=true
          #   -Dsonar.inclusions=**/*.h,**/*.cpp
          #   -Dsonar.cfamily.compiler.charset=UTF-8

      # 5. Opcional: Activar Quality Gate para fallar si no se cumplen estándares
      - name: Check SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}