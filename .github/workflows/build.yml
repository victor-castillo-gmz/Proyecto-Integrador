name: Build and Test Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # 1. Clone the repository

      # 2. Install necessary dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential lcov gcovr git # lcov and gcovr for coverage

      # (No longer need to manually install Google Test thanks to FetchContent in CMake)

      # 3. DEBUGGING STEP (Keep for diagnosis if needed)
      - name: List Project Files for Debugging
        run: |
          echo "Listing files in the repository root directory:"
          ls -F
          echo ""
          echo "Listing files recursively from the repository root:"
          ls -RF
          echo ""
          echo "Current working directory: $(pwd)"

      # 4. Create build directory and configure the project
      - name: Configure Build System
        run: |
          mkdir -p build
          cd build
          # Pass ENABLE_COVERAGE and ENABLE_TESTING flags to CMake
          cmake -DENABLE_COVERAGE=ON -DENABLE_TESTING=ON ..

      # 5. Build the project (including test executable)
      - name: Build Project
        run: |
          cd build
          cmake --build . # This builds all targets, including StreamingServiceApp and ServicioStreamingTest

      # 6. Run Unit Tests with detailed output on failure
      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure

      # 7. Generate Coverage Report (SonarQube XML format)
      - name: Generate SonarQube Coverage Report
        run: |
          cd build
          # This command triggers the 'sonarqube_coverage_xml' custom target defined in CMakeLists.txt
          # It runs tests and then uses gcovr to create coverage.xml
          cmake --build . --target sonarqube_coverage_xml

      # 8. Upload Coverage Report as an artifact
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/coverage.xml # This is the XML report for SonarQube

  build_analysis:
    name: Build and Analyze
    runs-on: ubuntu-latest
    needs: tests # This job runs after 'tests' completes successfully

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for SonarQube analysis

      # 2. Download the coverage report generated in the previous job
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: build/ # Downloads coverage.xml into the build directory

      # (No longer need to install Google Test specifically for SonarQube)

      # 3. Run SonarQube Scan
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.cfamily.compile-commands=build/compile_commands.json
            -Dsonar.cfamily.reportPaths=build/coverage.xml # Point to the downloaded coverage XML report

      # 4. Optional: Check Quality Gate to fail the build if standards are not met
      - name: Check SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}